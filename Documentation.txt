
Here's a detailed explanation of the data structures used in your MyGit application, the approach taken, and how the problems were solved with these data structures and techniques. This insight will help clarify the core thought process behind implementing each feature.

Core Data Structures and Their Uses
1. Files and Directories
Purpose: To represent and store repository metadata, commit objects, and staging information.

Data Structure: The file system (using java.io.File and java.nio.file.Path).

Directories:
.mygit/: Root directory of the repository.
.mygit/objects: Stores commit and tree objects (content is hashed and stored).
.mygit/refs/heads: Stores references (pointers) to branches.
Files:
.mygit/HEAD: Points to the current branch or commit (detached state).
.mygit/index: Stores staged file entries (hashes and filenames).
.mygitignore: Contains patterns to ignore files during staging.
Why This Approach?
The file system acts as a simple, persistent database.
Mimics how real version control systems (like Git) store objects and metadata.
Easy to serialize and deserialize objects using file storage.
2. Map<String, String> in Diff and Merge
Purpose: To represent the mapping of filenames to their respective hashes during the comparison of branches or merges.
Example Use Case:
In the Diff class:
java
Copy code
Map<String, String> filesInBranch1 = getFilesFromTree(treeHash1);
Map<String, String> filesInBranch2 = getFilesFromTree(treeHash2);
Why This Approach?
Key-Value Mapping:
The key is the filename.
The value is the hash representing the file's content.
This allows easy comparison of file states between branches or commits.
How It Solves Problems:
File Comparison: Quickly determine which files were added, deleted, or modified by checking if the keys exist in both maps and comparing the associated hashes.
Efficient Lookups: Fast retrieval of file hashes by filename.
3. List<String> for Commit and Staging Data
Purpose: To store lines of text when reading files like the index, commit objects, or .mygitignore patterns.
Example Use Cases:
Reading the Index:
java
Copy code
List<String> lines = Files.readAllLines(Paths.get(INDEX_FILE));
Commit History:
java
Copy code
List<String> lines = Files.readAllLines(commitPath);
Why This Approach?
Ordered Storage: Preserves the order of entries, which is important for displaying staged files, commit logs, or file differences.
Easy Iteration: Allows iterating over lines to extract information (e.g., parsing staged entries or commit metadata).
How It Solves Problems:
Staging Files: Easily parse each line to get the file hash and filename.
Commit History: Traverse the lines to extract parent hashes, tree hashes, and metadata like author and date.
4. Set<String> for Ignored Patterns
Purpose: To store unique ignore patterns defined in the .mygitignore file.
Example Use Case:
java
Copy code
Set<String> ignorePatterns = Files.lines(ignoreFilePath)
                                   .map(String::trim)
                                   .filter(line -> !line.isEmpty() && !line.startsWith("#"))
                                   .collect(Collectors.toSet());
Why This Approach?
Uniqueness: Ensures that each ignore pattern is unique.
Efficient Lookups: Fast checks to determine if a file should be ignored.
How It Solves Problems:
Ignoring Files: Quickly verify if a file matches any pattern in the set before staging it.
5. Queue<String> for Breadth-First Search (BFS) in Merging
Purpose: To perform BFS when finding the common ancestor of two commits during a merge.
Example Use Case:
java
Copy code
Queue<String> queue1 = new LinkedList<>();
Queue<String> queue2 = new LinkedList<>();
Why This Approach?
BFS for Traversal: BFS explores commits level by level, ensuring the shortest path to a common ancestor is found.
Queues: Ideal for BFS since they follow the First-In-First-Out (FIFO) principle.
How It Solves Problems:
Finding Common Ancestor: Efficiently finds the nearest common ancestor commit when merging branches.
6. StringBuilder for Building File Content Dynamically
Purpose: To construct large strings efficiently, such as commit content or merged file content.
Example Use Case:
java
Copy code
StringBuilder commitContent = new StringBuilder();
commitContent.append("tree ").append(treeHash).append("\n");
Why This Approach?
Efficiency: Avoids the overhead of creating multiple String objects during concatenation.
Flexibility: Allows dynamic building of commit metadata or merge results.
How It Solves Problems:
Commit Generation: Efficiently constructs the commit metadata.
Merge Conflicts: Builds merged content with conflict markers (<<<<<<<, =======, >>>>>>>).
High-Level Problem-Solving Approach
1. Initialization (RepositoryInitializer.java)
Problem: Set up a repository structure.
Solution: Create the .mygit directory with necessary subdirectories and files.
2. Staging (StagingArea.java)
Problem: Track which files should be included in the next commit.
Solution: Use the index file to record file hashes and filenames.
3. Committing (Commit.java)
Problem: Record snapshots of the repository state.
Solution: Create commit objects containing tree data, author info, and parent references.
4. Branch Management (Branch.java)
Problem: Support multiple lines of development.
Solution: Use branch files in refs/heads to track commit pointers.
5. Merging (Merge.java)
Problem: Combine changes from different branches.
Solution: Find common ancestors and perform a three-way merge, detecting conflicts where necessary.
6. Diffing (Diff.java)
Problem: Visualize changes between files or branches.
Solution: Compare file hashes and display line-by-line differences.
7. Cloning (RepositoryCloner.java)
Problem: Duplicate repositories.
Solution: Recursively copy the repository directory structure and files.
8. User Interface (MyGit.java and Welcome.java)
Problem: Provide a simple command-line interface.
Solution: Use a switch statement to handle commands and a welcome message for first-time users.